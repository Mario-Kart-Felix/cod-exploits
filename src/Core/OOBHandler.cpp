#include "STDInclude.hpp"

#include "Network/Address.hpp"
#include "Network/Socket.hpp"

#include "Core/OOBHandler.hpp"

#define PROTOCOL "148" // "149"
#define STATSVERSION "155" // "159"
#define CONNECT_STRING "connect %llx \"\\cg_predictItems\\1\\cl_voice\\0\\rate\\25000\\snaps\\20\\name\\%s\\natType\\1\\rank\\1\\prestige\\1\\protocol\\" PROTOCOL "\\checksum\\-1740007858\\challenge\\%s\\statver\\" STATSVERSION " 2074144879\\invited\\0\\xuid\\%llx\\steamid\\%llx\\qport\\0\\onlineStats\\0\\migrating\\0\""

namespace Core
{
	OOBHandler::OOBHandler()
	{
		this->onCommand("challengeResponse", [this](Network::Socket* sock, Network::Address address, std::string data)
		{
			std::string challenge(data.data());
			int chal = atoi(challenge.data());
			//printf("Challenge: %X\n", chal);

			this->key = BYTE(chal);

			sock->send(address, Utils::String::VA(OOB_MAGIC CONNECT_STRING,
				this->xuid, this->name.data(), challenge.data(), this->xuid, (this->xuid >> 32) | (this->xuid << 32)));
		});

		this->onCommand("challengeResponse", [this](Network::Socket* sock, Network::Address address, std::string data)
		{
			std::string challenge(data.data());
			int chal = atoi(challenge.data());
			//printf("Challenge: %X\n", chal);

			this->key = BYTE(chal);

			sock->send(address, Utils::String::VA(OOB_MAGIC CONNECT_STRING,
				this->xuid, this->name.data(), challenge.data(), this->xuid, (this->xuid >> 32) | (this->xuid << 32)));
		});

		this->onCommand("R", [this](Network::Socket* sock, Network::Address address, std::string data)
		{
			//char length = data[0];
			while (!data.empty() && data[0] != '0')
			{
				data = data.substr(1);
			}

			Utils::String msg(data);
			if (msg.startsWith("0partyFull"))
			{
				printf("Party is full\n");
			}
			else if (msg.startsWith("0partyJoinFailed"))
			{
				printf("Failed to join party :(\n");
			}
			else if (msg.startsWith("0partyaccept"))
			{
				char challenge[100] = { 0 };
				sscanf_s(data.data(), "%*s %s %*s", challenge, sizeof(challenge));

				printf("Joining party...\n");
				std::string packet = Utils::String::VA(OOB_MAGIC "0memberJoin %s %llx war", challenge, this->xuid);
				packet.push_back(0);

				// Stats/rank and stuff
				static const unsigned char partyData[] =
				{
					0xA9, 0xFE, 0xF2, 0x54, 0x2E, 0x05, 0x02, 0x5C,
					0x20, 0x71, 0xF0, 0x97, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x8B, 0xBD, 0x44, 0xA5,
					0xA6, 0x44, 0xBD, 0x8B
				};

				static const unsigned char partySuffix[] =
				{
					0x00, 0x00, 0x03, 0xD2, 0x45, 0x00, 0xB5,
					0xFF, 0xFF, 0xFF, 0x72, 0x03, 0x00
				};

				packet.append(LPSTR(partyData), sizeof(partyData));
				packet.append(this->name);
				packet.append(LPSTR(partySuffix), sizeof(partySuffix));

				sock->send(address, packet);

				// Send some party info
				packet = OOB_MAGIC "RA 110";
				packet.push_back(0);

				sock->send(address, packet);
			}
			else
			{
				printf("Party data received!\n");
			}
		});

		this->onCommand("0hpong", [this](Network::Socket* sock, Network::Address address, std::string /*data*/)
		{
			std::string packet = Utils::String::VA(OOB_MAGIC "0joinParty " PROTOCOL " %llx 1 0 450 0 1 pw 1 ", this->xuid);
			packet.push_back(0);

			sock->send(address, packet);
		});

		this->onCommand("0partystate", [this](Network::Socket* sock, Network::Address address, std::string data)
		{
			printf("Joined party!\n");
			sock->send(address, Utils::String::VA(OOB_MAGIC "getchallenge 0 \"%llx\"", this->xuid));
		});

		this->onCommand("connectResponse", [this](Network::Socket* sock, Network::Address address, std::string data)
		{
			printf("Connection established.\n");
			if (this->readyHandler)
			{
				this->readyHandler(this, sock, address);
				this->readyHandler = {};
			}
		});
	}

	bool OOBHandler::handle(Network::Socket* sock, Network::Address address, std::string_view data)
	{
		if (std::memcmp(data.data(), OOB_MAGIC, 4)) return false;

		std::string buffer(data.begin() + 4, data.end());
		Utils::String command = buffer.data();
		auto pos = command.find_first_of(" \n");
		if (pos != std::string::npos)
		{
			command = buffer.substr(0, pos);
			buffer = buffer.substr(pos + 1);
		}
		else
		{
			command = std::string(buffer.data());
			buffer = std::string(buffer.begin() + command.size() + 1, buffer.end());
		}

		auto handler = this->commandHandlers.find(command.toLower());
		if (handler != this->commandHandlers.end())
		{
			handler->second(sock, address, buffer);
		}

		return true;
	}

	void OOBHandler::onCommand(std::string command, Utils::Slot<void(Network::Socket*, Network::Address, std::string data)> callback)
	{
		this->commandHandlers[Utils::String(command).toLower()] = callback;
	}

	void OOBHandler::connect(Network::Socket* sock, Network::Address addr, std::string _name, uint64_t _xuid, Utils::Slot<void(OOBHandler*, Network::Socket*, Network::Address)> callback)
	{
		printf("Connecting to %s...\n", addr.toString().data());

		this->name = _name;
		this->xuid = _xuid;
		this->readyHandler = callback;

		sock->send(addr, Utils::String::VA(OOB_MAGIC "0hping %d", rand()));
	}
}
