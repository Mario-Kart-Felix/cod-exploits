#include "STDInclude.hpp"

#include "Network/Address.hpp"
#include "Network/Socket.hpp"

#include "Core/OOBHandler.hpp"

namespace Core
{
	OOBHandler::OOBHandler()
	{
		this->onCommand("challengeResponse", [this](Network::Socket* sock, Network::Address address, std::string data)
		{
			std::string challenge(data.data());
			int chal = atoi(challenge.data());
			//printf("Challenge: %X\n", chal);

			this->key = BYTE(chal);

			sock->send(address, Utils::String::VA(OOB_MAGIC "connect %llx \"\\cg_predictItems\\1\\cl_voice\\0\\rate\\25000\\snaps\\30\\name\\%s\\natType\\1\\rank\\1\\prestige\\1\\protocol\\149\\checksum\\-1740007858\\challenge\\%s\\statver\\159 2074144879\\invited\\0\\xuid\\%llx\\qport\\0\\onlineStats\\0\\migrating\\0\"",
				this->xuid, this->name.data(), challenge.data(), this->xuid));
		});

		this->onCommand("connectResponse", [this](Network::Socket* sock, Network::Address address, std::string data)
		{
			printf("Connection established.\n");
			if (this->readyHandler)
			{
				this->readyHandler(this, sock, address);
			}

			//sock->send(address, OOB_MAGIC "disconnect");
		});
	}

	bool OOBHandler::handle(Network::Socket* sock, Network::Address address, std::string_view data)
	{
		if (std::memcmp(data.data(), OOB_MAGIC, 4)) return false;

		std::string buffer(data.begin() + 4, data.end());
		auto pos = buffer.find_first_of(" \n");
		Utils::String command = buffer;
		if (pos != std::string::npos)
		{
			command = buffer.substr(0, pos);
			buffer = buffer.substr(pos + 1);
		}
		else
		{
			command = std::string(buffer.data());
			buffer = "";
		}

		auto handler = this->commandHandlers.find(command.toLower());
		if (handler != this->commandHandlers.end())
		{
			handler->second(sock, address, buffer);
		}

		return true;
	}

	void OOBHandler::onCommand(std::string command, Utils::Slot<void(Network::Socket*, Network::Address, std::string data)> callback)
	{
		this->commandHandlers[Utils::String(command).toLower()] = callback;
	}

	void OOBHandler::connect(Network::Socket* sock, Network::Address addr, std::string _name, uint64_t _xuid, Utils::Slot<void(OOBHandler*, Network::Socket*, Network::Address)> callback)
	{
		printf("Connecting to %s...\n", addr.toString().data());

		this->name = _name;
		this->xuid = _xuid;
		this->readyHandler = callback;
		sock->send(addr, Utils::String::VA(OOB_MAGIC "getChallenge 0 \"%llx\"", this->xuid));
	}
}
