#include "STDInclude.hpp"

#include "Network/Address.hpp"
#include "Network/Sniffer.hpp"

#include "Game/MW2/Handler.hpp"
#include "Game/MW2/Client.hpp"

namespace Game
{
	namespace MW2
	{
		int Client::getDirection(Network::Address source, Network::Address _target)
		{
			if (source == this->target) return Client::PacketDirection::REMOTE_TO_LOCAL;
			if (_target == this->target) return Client::PacketDirection::LOCAL_TO_REMOTE;

			return Client::PacketDirection::NONE;
		}

		void Client::handleSend(Network::Sniffer* sniffer, pcap_t* networkIf, std::string_view data, std::string_view rawData)
		{
			sniffer;
			networkIf;
			data;
			rawData;

			if (this->packetTemplate.empty())
			{
				this->packetTemplate = rawData;
			}
		}

		void Client::handleReceive(Network::Sniffer* sniffer, pcap_t* networkIf, std::string_view data, std::string_view rawData)
		{
			sniffer;
			networkIf;
			data;
			rawData;
		}

		Client::Client(Handler* _handler, uint64_t _xuid, Network::Address _target) : handler(_handler), xuid(_xuid), target(_target)
		{
			printf("Connecting to party at %s with xuid %llX\n", this->target.toString().data(), this->xuid);
		}
		
		Client::~Client()
		{

		}
	}
}
