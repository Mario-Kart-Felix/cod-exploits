#include "STDInclude.hpp"

#include "Network/Address.hpp"
#include "Network/Sniffer.hpp"

#include "Game/MW2/Handler.hpp"
#include "Game/MW2/Client.hpp"

namespace Game
{
	namespace MW2
	{
		Handler::Handler(Network::Sniffer* _sniffer) : sniffer(_sniffer)
		{
			using namespace std::placeholders;
			sniffer->onPacket(std::bind(&Handler::handler, this, _1, _2, _3, _4, _5, _6));
			printf("Listening for MW2 connections...\n");
		}
		
		Handler::~Handler()
		{

		}

		void Handler::handler(Network::Sniffer* /*sniffer*/, pcap_t* networkIf, Network::Address source, Network::Address target, std::string_view data, std::string_view rawData)
		{
			if (data.find("\xFF\xFF\xFF\xFF" "0joinParty") == 0
				&& source.isLocal()) // If source is not local, then someone is connecting to us or the network config is fucked up!
			{
				uint64_t xuid = 0;
				sscanf_s(data.data() + 4, "%*s %*d %llx", &xuid);
				this->client = std::make_shared<Client>(this, xuid, target);
			}

			if (this->client)
			{
				int dir = this->client->getDirection(source, target);
				if (dir != Client::PacketDirection::NONE)
				{
					this->client->handle(sniffer, networkIf, data, rawData, dir == Client::PacketDirection::REMOTE_TO_LOCAL);
				}
			}
		}
	}
}
