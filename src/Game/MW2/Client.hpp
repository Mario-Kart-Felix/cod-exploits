#pragma once

namespace Game
{
	namespace MW2
	{
		class Client
		{
		public:
			enum PacketDirection
			{
				NONE = 0,
				LOCAL_TO_REMOTE,
				REMOTE_TO_LOCAL
			};

			Client(Handler* handler, Network::Address target);
			~Client();

			int getDirection(Network::Address source, Network::Address target);
			void handle(Network::Sniffer* sniffer, pcap_t* networkIf, std::string_view data, std::string_view rawData, bool receiving);

		private:
			typedef Utils::Slot<void(Network::Sniffer* sniffer, pcap_t* networkIf, std::string data, bool receiving)> Callback;

			Handler* handler;
			uint64_t xuid;
			unsigned short qport;
			Network::Address target;

			std::string packetTemplate;

			std::map<std::string, Callback> oobHandlers;

			bool handleOOB(Network::Sniffer* sniffer, pcap_t* networkIf, std::string_view data, bool receiving);
			void handleNetchan(Network::Sniffer* sniffer, pcap_t* networkIf, std::string_view data, bool receiving);

			void onOOB(std::string command, Callback callback);
			void send(Network::Sniffer* sniffer, pcap_t* networkIf, std::string data);
		};
	}
}
