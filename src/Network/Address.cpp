#include "STDInclude.hpp"

#include "Network/Address.hpp"

namespace Network
{
	Address::Address(std::string addr)
	{
		this->parse(addr);
	}

	Address::Address(sockaddr_in* addr)
	{
		this->address = *addr;
	}

	void Address::setIPv4(ULONG addr)
	{
		this->address.sin_family = AF_INET;
		this->address.sin_addr.s_addr = addr;
	}

	void Address::setPort(unsigned short port)
	{
		this->address.sin_port = htons(port);
	}

	unsigned short Address::getPort()
	{
		return ntohs(this->address.sin_port);
	}

	sockaddr* Address::getAddr()
	{
		return reinterpret_cast<sockaddr*>(&this->address);
	}

	void Address::parse(std::string addr)
	{
		auto pos = addr.find_last_of(":");
		if (pos != std::string::npos)
		{
			std::string port = addr.substr(pos + 1);
			this->setPort(USHORT(atoi(port.data())));

			addr = addr.substr(0, pos);
		}

		this->resolve(addr);
	}

	void Address::resolve(std::string hostname)
	{
		addrinfo *result = nullptr;
		if (!getaddrinfo(hostname.data(), nullptr, nullptr, &result))
		{
			unsigned short port = this->getPort();
			std::memcpy(&this->address, result->ai_addr, sizeof(this->address));
			this->setPort(port);

			freeaddrinfo(result);
		}
	}
}
