#pragma once

#include <pcap.h>

//AssertSize(in_addr, 4);

struct macAddress
{
	u_char data[6];
};

struct ethHeader
{
	macAddress dest_mac;
	macAddress src_mac;
	u_short type;
};

struct loopbackHeader
{
	u_int type;
};

struct ipHeader
{
	u_char	ver_ihl;		// Version (4 bits) + Internet header length (4 bits)
	u_char	tos;			// Type of service 
	u_short tlen;			// Total length 
	u_short identification; // Identification
	u_short flags_fo;		// Flags (3 bits) + Fragment offset (13 bits)
	u_char	ttl;			// Time to live
	u_char	proto;			// Protocol
	u_short crc;			// Header checksum
	in_addr	saddr;		    // Source address
	in_addr	daddr;		    // Destination address
	u_int	op_pad;			// Option + Padding
};

struct udpHeader
{
	u_short sport;			// Source port
	u_short dport;			// Destination port
	u_short len;			// Datagram length
	u_short crc;			// Checksum
};

// TODO: Maybe switch to WinDivert instead of npcap (winpcap) to intercept the game traffic?
// https://reqrypt.org/windivert.html
namespace Network
{
	class Interface
	{
	public:
		pcap_t* handle;
	};

	class Sniffer
	{
	public:
		typedef Utils::Slot<void(Network::Sniffer* sniffer, Network::Interface* networkIf, Network::Address source, Network::Address target, std::string_view data, std::string_view rawData)> Callback;

		Sniffer();
		~Sniffer();

		void send(Network::Interface* networkIf, std::string data);
		void onPacket(Callback callback);

	private:
		class Interface
		{
		public:
			pcap_t* handle;
			std::thread thread;
		};

		class Context
		{
		public:
			pcap_t* handle;
			Sniffer* sniffer;

			template <typename T>
			T* as()
			{
				return reinterpret_cast<T*>(this);
			}

			template <typename T>
			static Context* From(T* param)
			{
				return reinterpret_cast<Context*>(param);
			}
		};

		std::vector<Interface> interfaces;
		Callback callback;

		void openAllInterfaces();
		bool openInterface(char* name);

		void packetHandler(pcap_t *handle, const pcap_pkthdr* header, const u_char *pktData);
		static void PacketHandler(u_char *param, const pcap_pkthdr* header, const u_char *pktData);
	};
}