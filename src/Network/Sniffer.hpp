#pragma once

#include <windivert.h>

//AssertSize(in_addr, 4);

struct macAddress
{
	u_char data[6];
};

struct ethHeader
{
	macAddress dest_mac;
	macAddress src_mac;
	u_short type;
};

struct loopbackHeader
{
	u_int type;
};

namespace Network
{
	class Interface
	{
	public:
		HANDLE handle;
	};

	class Sniffer
	{
	public:
		typedef Utils::Slot<void(Network::Sniffer* sniffer, Network::Interface* networkIf, Network::Address source, Network::Address target, std::string_view data, std::string_view rawData)> Callback;

		Sniffer();
		~Sniffer();

		bool send(Network::Interface* networkIf, std::string data);
		void onPacket(Callback callback);

		void run();
		void stop();

	private:
		HANDLE handle;
		Callback callback;

		bool stopped;
	};
}