#include "STDInclude.hpp"

#include "Network/Address.hpp"
#include "Network/Sniffer.hpp"

namespace Network
{
	void Sniffer::stop()
	{
		this->stopped = true;
		if (this->handle != INVALID_HANDLE_VALUE)
		{
			WinDivertClose(this->handle);
			this->handle = INVALID_HANDLE_VALUE;
		}
	}

	void Sniffer::run()
	{
		Utils::Memory::Allocator allocator;

		u_int size = 0;
		const u_int maxSize = 0x10000;
		u_char* buffer = allocator.allocateArray<u_char>(maxSize);

		WINDIVERT_ADDRESS address;

		while (!this->stopped && this->handle != INVALID_HANDLE_VALUE)
		{
			if (WinDivertRecv(this->handle, buffer, maxSize, &address, &size) == TRUE)
			{
				printf("Received packet!\n");
			}
		}
	}

	bool Sniffer::send(Network::Interface* networkIf, std::string data)
	{
		return 0;
	}

	void Sniffer::onPacket(Callback _callback)
	{
		this->callback = _callback;
	}

	Sniffer::Sniffer() : stopped(false)
	{
		this->handle = WinDivertOpen("ip and udp", WINDIVERT_LAYER_NETWORK, -1000, 0);
	}

	Sniffer::~Sniffer()
	{
		this->stop();
	}
}
