#include "STDInclude.hpp"

#include "Network/Address.hpp"
#include "Network/Socket.hpp"

namespace Network
{
	Socket::Socket()
	{
		WSADATA wsaData;
		if (WSAStartup(MAKEWORD(2, 2), &wsaData))
		{
			throw std::runtime_error("Unable to start the Windows Sockets API");
		}

		this->s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
		if (this->s == INVALID_SOCKET)
		{
			throw std::runtime_error("Unable to create the socket");
		}

		unsigned long nonBlocking = 1;
		ioctlsocket(this->s, FIONBIO, &nonBlocking);

		this->thread = std::thread(std::bind(&Socket::runner, this));
	}

	void Socket::runner()
	{
		const size_t bufferSize = 0x2000;
		Utils::Memory::Allocator allocator;

		char* buffer = allocator.allocateArray<char>(bufferSize + 1);
		while (this->s != INVALID_SOCKET)
		{
			sockaddr_in addr;
			int addrLen = INT(sizeof(addr));
			int len = recvfrom(this->s, buffer, bufferSize, 0, reinterpret_cast<sockaddr*>(&addr), &addrLen);

			if (len < 0) std::this_thread::sleep_for(50ms);
			else if (this->callback)
			{
				std::string_view view(buffer, len);
				this->callback(&addr, view);
			}
		}
	}

	void Socket::onData(Utils::Slot<void(Network::Address, std::string_view)> _callback)
	{
		this->callback = _callback;
	}

	void Socket::send(Network::Address addr, std::string data)
	{
		sendto(this->s, data.data(), INT(data.size()), 0, addr.getAddr(), sizeof(*addr.getAddr()));
	}

	Socket::~Socket()
	{
		SOCKET sock = this->s;
		this->s = INVALID_SOCKET;

		if (this->thread.joinable())
		{
			this->thread.join();
		}

		closesocket(sock);
		WSACleanup();
	}
}
